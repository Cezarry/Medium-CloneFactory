/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ExampleContractInterface extends utils.Interface {
  functions: {
    "constantNumber()": FunctionFragment;
    "immutableNumber()": FunctionFragment;
    "initializeContract()": FunctionFragment;
    "num1()": FunctionFragment;
    "num2()": FunctionFragment;
    "num3()": FunctionFragment;
    "num4()": FunctionFragment;
    "num5()": FunctionFragment;
    "number()": FunctionFragment;
    "setNumber(uint256)": FunctionFragment;
    "someFunction1()": FunctionFragment;
    "someFunction2()": FunctionFragment;
    "someFunction3()": FunctionFragment;
    "someFunction4()": FunctionFragment;
    "someFunction5()": FunctionFragment;
    "testString1()": FunctionFragment;
    "testString2()": FunctionFragment;
    "testString3()": FunctionFragment;
    "testString4()": FunctionFragment;
    "testString5()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "constantNumber"
      | "immutableNumber"
      | "initializeContract"
      | "num1"
      | "num2"
      | "num3"
      | "num4"
      | "num5"
      | "number"
      | "setNumber"
      | "someFunction1"
      | "someFunction2"
      | "someFunction3"
      | "someFunction4"
      | "someFunction5"
      | "testString1"
      | "testString2"
      | "testString3"
      | "testString4"
      | "testString5"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "constantNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "immutableNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "num1", values?: undefined): string;
  encodeFunctionData(functionFragment: "num2", values?: undefined): string;
  encodeFunctionData(functionFragment: "num3", values?: undefined): string;
  encodeFunctionData(functionFragment: "num4", values?: undefined): string;
  encodeFunctionData(functionFragment: "num5", values?: undefined): string;
  encodeFunctionData(functionFragment: "number", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "someFunction1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "someFunction2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "someFunction3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "someFunction4",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "someFunction5",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testString1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testString2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testString3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testString4",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testString5",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "constantNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "immutableNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "num1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "num2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "num3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "num4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "num5", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "number", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNumber", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "someFunction1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "someFunction2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "someFunction3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "someFunction4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "someFunction5",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testString1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testString2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testString3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testString4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testString5",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ExampleContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExampleContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    constantNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    immutableNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    initializeContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    num1(overrides?: CallOverrides): Promise<[BigNumber]>;

    num2(overrides?: CallOverrides): Promise<[BigNumber]>;

    num3(overrides?: CallOverrides): Promise<[BigNumber]>;

    num4(overrides?: CallOverrides): Promise<[BigNumber]>;

    num5(overrides?: CallOverrides): Promise<[BigNumber]>;

    number(overrides?: CallOverrides): Promise<[BigNumber]>;

    setNumber(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    someFunction1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    someFunction2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    someFunction3(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    someFunction4(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    someFunction5(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testString1(overrides?: CallOverrides): Promise<[string]>;

    testString2(overrides?: CallOverrides): Promise<[string]>;

    testString3(overrides?: CallOverrides): Promise<[string]>;

    testString4(overrides?: CallOverrides): Promise<[string]>;

    testString5(overrides?: CallOverrides): Promise<[string]>;
  };

  constantNumber(overrides?: CallOverrides): Promise<BigNumber>;

  immutableNumber(overrides?: CallOverrides): Promise<BigNumber>;

  initializeContract(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  num1(overrides?: CallOverrides): Promise<BigNumber>;

  num2(overrides?: CallOverrides): Promise<BigNumber>;

  num3(overrides?: CallOverrides): Promise<BigNumber>;

  num4(overrides?: CallOverrides): Promise<BigNumber>;

  num5(overrides?: CallOverrides): Promise<BigNumber>;

  number(overrides?: CallOverrides): Promise<BigNumber>;

  setNumber(
    _number: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  someFunction1(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  someFunction2(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  someFunction3(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  someFunction4(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  someFunction5(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testString1(overrides?: CallOverrides): Promise<string>;

  testString2(overrides?: CallOverrides): Promise<string>;

  testString3(overrides?: CallOverrides): Promise<string>;

  testString4(overrides?: CallOverrides): Promise<string>;

  testString5(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    constantNumber(overrides?: CallOverrides): Promise<BigNumber>;

    immutableNumber(overrides?: CallOverrides): Promise<BigNumber>;

    initializeContract(overrides?: CallOverrides): Promise<void>;

    num1(overrides?: CallOverrides): Promise<BigNumber>;

    num2(overrides?: CallOverrides): Promise<BigNumber>;

    num3(overrides?: CallOverrides): Promise<BigNumber>;

    num4(overrides?: CallOverrides): Promise<BigNumber>;

    num5(overrides?: CallOverrides): Promise<BigNumber>;

    number(overrides?: CallOverrides): Promise<BigNumber>;

    setNumber(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    someFunction1(overrides?: CallOverrides): Promise<void>;

    someFunction2(overrides?: CallOverrides): Promise<void>;

    someFunction3(overrides?: CallOverrides): Promise<void>;

    someFunction4(overrides?: CallOverrides): Promise<void>;

    someFunction5(overrides?: CallOverrides): Promise<void>;

    testString1(overrides?: CallOverrides): Promise<string>;

    testString2(overrides?: CallOverrides): Promise<string>;

    testString3(overrides?: CallOverrides): Promise<string>;

    testString4(overrides?: CallOverrides): Promise<string>;

    testString5(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    constantNumber(overrides?: CallOverrides): Promise<BigNumber>;

    immutableNumber(overrides?: CallOverrides): Promise<BigNumber>;

    initializeContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    num1(overrides?: CallOverrides): Promise<BigNumber>;

    num2(overrides?: CallOverrides): Promise<BigNumber>;

    num3(overrides?: CallOverrides): Promise<BigNumber>;

    num4(overrides?: CallOverrides): Promise<BigNumber>;

    num5(overrides?: CallOverrides): Promise<BigNumber>;

    number(overrides?: CallOverrides): Promise<BigNumber>;

    setNumber(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    someFunction1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    someFunction2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    someFunction3(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    someFunction4(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    someFunction5(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testString1(overrides?: CallOverrides): Promise<BigNumber>;

    testString2(overrides?: CallOverrides): Promise<BigNumber>;

    testString3(overrides?: CallOverrides): Promise<BigNumber>;

    testString4(overrides?: CallOverrides): Promise<BigNumber>;

    testString5(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    constantNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    immutableNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    num1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    num2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    num3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    num4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    num5(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    number(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setNumber(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    someFunction1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    someFunction2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    someFunction3(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    someFunction4(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    someFunction5(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testString1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testString2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testString3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testString4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testString5(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
