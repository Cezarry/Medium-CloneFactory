/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  FactoryByClone,
  FactoryByCloneInterface,
} from "../FactoryByClone";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_baseExampleContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "baseExampleContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cloneContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "contracts",
    outputs: [
      {
        internalType: "contract ExampleContract",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getContracts",
    outputs: [
      {
        internalType: "contract ExampleContract[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610680380380610680833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b610569806101176000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630ef5457914610051578063474da79a1461006f578063c3a2a93a1461009f578063e3fcee39146100bd575b600080fd5b6100596100c7565b6040516100669190610356565b60405180910390f35b610089600480360381019061008491906103ac565b6100eb565b6040516100969190610438565b60405180910390f35b6100a761012a565b6040516100b49190610511565b60405180910390f35b6100c56101b8565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600181815481106100fb57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060018054806020026020016040519081016040528092919081815260200182805480156101ae57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610164575b5050505050905090565b60006101e360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166102ab565b90508073ffffffffffffffffffffffffffffffffffffffff16639eb32fdb6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561022d57600080fd5b505af1158015610241573d6000803e3d6000fd5b505050506001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808260601b90506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f092505050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061034082610315565b9050919050565b61035081610335565b82525050565b600060208201905061036b6000830184610347565b92915050565b600080fd5b6000819050919050565b61038981610376565b811461039457600080fd5b50565b6000813590506103a681610380565b92915050565b6000602082840312156103c2576103c1610371565b5b60006103d084828501610397565b91505092915050565b6000819050919050565b60006103fe6103f96103f484610315565b6103d9565b610315565b9050919050565b6000610410826103e3565b9050919050565b600061042282610405565b9050919050565b61043281610417565b82525050565b600060208201905061044d6000830184610429565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61048881610417565b82525050565b600061049a838361047f565b60208301905092915050565b6000602082019050919050565b60006104be82610453565b6104c8818561045e565b93506104d38361046f565b8060005b838110156105045781516104eb888261048e565b97506104f6836104a6565b9250506001810190506104d7565b5085935050505092915050565b6000602082019050818103600083015261052b81846104b3565b90509291505056fea2646970667358221220a86372c278c9fbfe5a4a0c537987356942d38b8a7cd3f8e7f502fdbce81e2ccb64736f6c63430008110033";

type FactoryByCloneConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FactoryByCloneConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FactoryByClone__factory extends ContractFactory {
  constructor(...args: FactoryByCloneConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _baseExampleContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FactoryByClone> {
    return super.deploy(
      _baseExampleContract,
      overrides || {}
    ) as Promise<FactoryByClone>;
  }
  override getDeployTransaction(
    _baseExampleContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_baseExampleContract, overrides || {});
  }
  override attach(address: string): FactoryByClone {
    return super.attach(address) as FactoryByClone;
  }
  override connect(signer: Signer): FactoryByClone__factory {
    return super.connect(signer) as FactoryByClone__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FactoryByCloneInterface {
    return new utils.Interface(_abi) as FactoryByCloneInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FactoryByClone {
    return new Contract(address, _abi, signerOrProvider) as FactoryByClone;
  }
}
